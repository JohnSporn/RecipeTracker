@page "/recipes/create"

@inject IRecipeService RecipeService
@inject ICategoryService CategoryService

<h3>New Recipe</h3>

<EditForm Model="Input" OnValidSubmit="SaveRecipe" FormName="NewRecipe">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Title"
                                  @bind-Value="Input.Title" For="@(() => Input.Title)" />
                    <MudTextField Label="Description" Class="mt-3"
                                  @bind-Value="Input.Description" For="@(() => Input.Description)" Lines="5" />
                    <MudTextField Label="Ingredients" Class="mt-3"
                                  @bind-Value="Input.Ingredients" For="@(() => Input.Ingredients)" Lines="8" />
                    <MudTextField Label="Instructions" Class="mt-3"
                                  @bind-Value="Input.Instructions" For="@(() => Input.Instructions)" Lines="8" />
                    <MudSelect @bind-Value="Input.Category" Label="Category" Class="mt-3" Placeholder="Choose a Category">
                        @foreach (var category in Categories)
                        {
                                    <MudSelectItem Value="category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudText Color="Color.Error">@Message</MudText>
    </MudGrid>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; }
    private string Message { get; set; } = string.Empty;
    private IEnumerable<Category> Categories = Enumerable.Empty<Category>();


    protected override async void OnInitialized()
    {
        if (Input == null)
        {
            Input = new();
        }

        Categories = await CategoryService.CategoryGetAll();
    }

    private async void SaveRecipe()
    {
        var recipe = new Recipe
            {
                Title = Input.Title,
                Description = Input.Description,
                Ingredients = Input.Ingredients,
                Instructions = Input.Instructions,
                CategoryId = Input.Category
            };

        int id = await RecipeService.RecipeInsert(recipe);

        if (id != 0)
        {
            Message = "Recipe created successfully.";
        }

        Input = new();
    }

    public class InputModel
    {
        [Required(ErrorMessage = "Title is required.")]
        public string Title { get; set; }
        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; }
        [Required(ErrorMessage = "Ingredients is required.")]
        public string Ingredients { get; set; }
        [Required(ErrorMessage = "Instructions is required.")]
        public string Instructions { get; set; }
        [Required(ErrorMessage = "Category is required.")]
        public int Category { get; set; }
    }
}
