@page "/categories/category-form/{id:int?}"

@inject ICategoryService CategoryService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudButton Class="mb-3" Variant="Variant.Filled" Href="/categories/list">Back to list</MudButton>
<EditForm Model="Input" OnValidSubmit="SaveCategory" FormName="NewCategory">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Name"
                                  @bind-Value="Input.Name" For="@(() => Input.Name)" />
                </MudCardContent>
                <MudCardActions>
                    <MudStack>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">@(Id == 0 ? "Create" : "Update")</MudButton>
                        @if (Id != 0)
                        {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" FullWidth="true" @onclick="DeleteCategory">Delete</MudButton>
                        }
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudText Color="Color.Error">@Message</MudText>
    </MudGrid>
</EditForm>

<p class="text-danger">@Message</p>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; }
    private string Message { get; set; } = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async void OnInitialized()
    {
        if (Id == 0)
        {
            Input = new();
        }
        else
        {
            var category = await CategoryService.CategoryGet(Id);
            Input = new InputModel
                {
                    Id = category!.Id,
                    Name = category!.Name
                };
        }
    }

    private async void SaveCategory()
    {
        var category = new Category
            {
                Id = Id,
                Name = Input.Name
            };

        int result = await CategoryService.CategoryUpsert(category);

        if (result != 0)
        {
            Navigation.NavigateTo("/categories/list");
        }
        else
        {
            Message = "Error saving category.";
        }
    }

    private Task DeleteCategory()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Id", Id },
            { "IsRecipe", false }
        };

        return DialogService.ShowAsync<Delete>("Delete", parameters, options);
    }

    public class InputModel
    {
        public int Id { get; set; }
        [Required(ErrorMessage = "Title is required.")]
        public string Name { get; set; }
    }
}